
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import { Database } from '@/types/database';

const SUPABASE_URL = "https://ksiinmxsycosnpchutuw.supabase.co";
export const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtzaWlubXhzeWNvc25wY2h1dHV3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU1MjM1MDAsImV4cCI6MjA2MTA5OTUwMH0.BupjPSp1HUmzrHPjn2z4fS-Np00EexnFjDTGfeZsuBY";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: false, // Changed to false to prevent auto-login
    autoRefreshToken: true, // Keep this true for security during active sessions
    detectSessionInUrl: true
  }
});

// Function to check if session requires verification
export const sessionRequiresVerification = async (): Promise<boolean> => {
  try {
    const { data } = await supabase.auth.getSession();
    
    // If there's no session, verification is required
    if (!data.session) return true;
    
    // Get user security record to check if this session has been verified
    const { data: securityData, error } = await supabase
      .from('user_security')
      .select('last_verified')
      .eq('user_id', data.session.user.id)
      .single();
      
    // If we found a security record with a recent verification, don't require re-verification
    if (securityData?.last_verified) {
      const lastVerified = new Date(securityData.last_verified);
      const currentTime = new Date();
      const hoursSinceVerification = (currentTime.getTime() - lastVerified.getTime()) / (1000 * 60 * 60);
      
      // If verified in the last hour, don't require verification
      if (hoursSinceVerification <= 1) {
        console.log("Recent verification found, not requiring re-verification");
        return false;
      }
    }
    
    // Use created_at from user.created_at as fallback since Session might not have created_at
    const sessionCreatedAt = new Date(data.session.user?.created_at || Date.now());
    const currentTime = new Date();
    const sessionAgeHours = (currentTime.getTime() - sessionCreatedAt.getTime()) / (1000 * 60 * 60);
    
    // If session is older than 1 hour, require re-verification
    return sessionAgeHours > 1;
  } catch (error) {
    console.error("Error checking session:", error);
    return true; // If there's an error, require verification to be safe
  }
};

// Function to get user security profile
export const getUserSecurityProfile = async (): Promise<{
  lastVerified?: Date;
  knownDevices?: string[];
  requiresVerification: boolean;
}> => {
  try {
    const { data: { session } } = await supabase.auth.getSession();
    
    if (!session) {
      return { requiresVerification: true };
    }
    
    // Get security info from user metadata if available
    const { data } = await supabase
      .from('user_security')
      .select('*')
      .eq('user_id', session.user.id)
      .single();
      
    if (data) {
      return {
        lastVerified: data.last_verified ? new Date(data.last_verified) : undefined,
        knownDevices: data.known_devices || [],
        requiresVerification: true // Always require verification for this sensitive platform
      };
    }
    
    return { requiresVerification: true };
  } catch (error) {
    console.error("Error getting security profile:", error);
    return { requiresVerification: true };
  }
};
